#include <iostream>
#include <chrono>
#include <iomanip>
#include <vector>
#include <cmath>

using namespace std;

int sieveOfEratosthenes(int n) 
{
    vector<bool> sieve(n + 1, true);
    sieve[0] = sieve[1] = false;

    for (int i = 2; i <= sqrt(n); ++i) 
    {
        if (sieve[i]) 
        {
            for (int j = i * i; j <= n; j += i) 
            {
                sieve[j] = false;
            }
        }
    }
    int count = 0;
    for (bool isPrime : sieve) 
    {
        if (isPrime) ++count;
    }
    return count;
}

int main() 
{
    int test_values[] = {1000, 10000, 100000, 1000000};

    cout << left << setw(10) << "n" << setw(20) << "Liczba liczb pierwszych" << "Czas wykonania (s)" << endl;
    cout << "-------------------------------------------------------------" << endl;

    for (int n : test_values) 
    {
        auto start = chrono::high_resolution_clock::now();
        int primeCount = sieveOfEratosthenes(n);
        auto end = chrono::high_resolution_clock::now();
        chrono::duration<double> elapsed = end - start;

        cout << left << setw(10) << n << setw(20) << primeCount << elapsed.count() << endl;
    }

    return 0;
}
